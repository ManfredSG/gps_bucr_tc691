#include <TinyGPS++.h> // Libreria para extraer datos del GPS
#include <SoftwareSerial.h>
#include <ArduinoJson.h> // Libreria para crear y manejar archivos JSON
#include <WiFiEspAT.h> // Libreria para manejar comandos AT

TinyGPSPlus gpsModule;
SoftwareSerial GPS(4, 3); // RX, TX para GPS
SoftwareSerial espSerial(2, 3); // RX, TX para ESP8266

const char* ssid = "your_SSID";
const char* password = "your_PASSWORD";
const char* api_url = "https://realtime.bucr.digital/api/position";

WiFiClient client;

void setup() {
  Serial.begin(9600);
  GPS.begin(9600);
  espSerial.begin(115200);
  
  WiFi.init(espSerial);

  if (WiFi.status() == WL_NO_MODULE) {
    Serial.println("Communication with WiFi module failed!");
    while (true);
  }

  connectToWiFi();
}

void loop() {
  while (GPS.available() > 0)
    if (gpsModule.encode(GPS.read())) // Actualiza 'gpsModule' con la información del GPS
      gpsData();

  // Revisar si el GPS no responde
  if (millis() > 5000 && gpsModule.charsProcessed() < 10) {
    Serial.println("Error: GPS no responde");
    while (true);
  }
}

void connectToWiFi() {
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print("Connecting to WiFi...");
    WiFi.begin(ssid, password);

    unsigned long start = millis();
    while (WiFi.status() != WL_CONNECTED && millis() - start < 10000) {
      delay(500);
      Serial.print(".");
    }
    Serial.println();
  }

  Serial.println("Connected to WiFi");
}

void gpsData() {
  StaticJsonDocument<256> JSON; // JSON de 256 bytes

  // Localización
  if (gpsModule.location.isValid()) {
    JSON["latitud"] = gpsModule.location.lat();
    JSON["longitud"] = gpsModule.location.lng();
    JSON["altitud"] = gpsModule.altitude.meters();
  } else {
    JSON["localizacion"] = "No disponible";
  }

  // Fecha
  if (gpsModule.date.isValid()) {
    char fecha[11];
    sprintf(fecha, "%02d/%02d/%04d", gpsModule.date.day(), gpsModule.date.month(), gpsModule.date.year());
    JSON["fecha"] = fecha;
  } else {
    JSON["fecha"] = "No disponible";
  }

  // Hora
  if (gpsModule.time.isValid()) {
    char hora[13];
    sprintf(hora, "%02d:%02d:%02d.%02d", gpsModule.time.hour() - 6, gpsModule.time.minute(), gpsModule.time.second(), gpsModule.time.centisecond());
    JSON["hora"] = hora;
  } else {
    JSON["hora"] = "No disponible";
  }

  // Serializar JSON
  String json;
  serializeJson(JSON, json);
  Serial.println(json);

  // Enviar datos a la API
  sendToAPI(api_url, json);
  delay(1000);
}

void sendToAPI(String url, String data) {
  if (client.connect(getHost(url).c_str(), getPort(url))) {
    String request = "POST " + getPath(url) + " HTTP/1.1\r\n";
    request += "Host: " + getHost(url) + "\r\n";
    request += "Content-Type: application/json\r\n";
    request += "Content-Length: " + String(data.length()) + "\r\n";
    request += "\r\n";
    request += data;

    client.print(request);

    while (client.connected()) {
      String line = client.readStringUntil('\n');
      if (line == "\r") {
        break;
      }
    }
    String response = client.readString();
    Serial.println("API Response: " + response);

    client.stop();
  } else {
    Serial.println("Connection to API failed");
  }
}

String getHost(String url) {
  int idx1 = url.indexOf("://") + 3;
  int idx2 = url.indexOf("/", idx1);
  return url.substring(idx1, idx2);
}

int getPort(String url) {
  if (url.startsWith("https://")) {
    return 443;
  } else {
    return 80;
  }
}

String getPath(String url) {
  int idx1 = url.indexOf("://") + 3;
  int idx2 = url.indexOf("/", idx1);
  return url.substring(idx2);
}
