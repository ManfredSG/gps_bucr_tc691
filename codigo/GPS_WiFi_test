#include <WiFiEspAT.h>       // Librería para la comunicación con el módulo WiFi basado en AT comandos
#include <TinyGPS++.h>       // Librería para manejar datos del GPS
#include <ArduinoJson.h>     // Librería para manejar JSON
#include <SoftwareSerial.h>  // Librería para la comunicación serie 

SoftwareSerial SerialWifi(8, 9); // Objeto para manejar la comunicación serie con el módulo WiFi
#define AT_BAUD_RATE 9600 // Velocidad de comunicación con el módulo WiFi
SoftwareSerial SerialGPS(4, 3); // Objeto para manejar la comunicación serie con el módulo GPS

TinyGPSPlus gpsFilter; // Objeto para procesar los datos del GPS

const char* ssid = "ARCOSWIFI-INII-2G";        // Tu SSID
const char* password = "Lnrqv6ozs4FEc";// Tu contraseña
const char* serverName = "192.168.17.135"; // IP del servidor
const int serverPort = 8000;             // Puerto del servidor

void setup() {
  Serial.begin(9600);
  while (!Serial);    // Esperar a que la conexión serie esté disponible

  SerialWifi.begin(9600); // Iniciar comunicación serie con el módulo WiFi
  WiFi.init(SerialWifi); // Inicializar la librería WiFi con el puerto serie

  // Verificar si el módulo WiFi está conectado
  if (WiFi.status() == WL_NO_MODULE) {
    Serial.println("La comunicación con el módulo Wifi falló!");
    while (true); // Detener la ejecución si no se puede comunicar con el módulo WiFi
  }

  // Conectar a la red WiFi
  Serial.println("Conectándose a la red Wifi");
  while (WiFi.status() != WL_CONNECTED) {
    WiFi.begin(ssid, password); // Intentar conectar a la red WiFi
    delay(1000);
    Serial.print('.');
  }
  Serial.println("Conectado al Wifi.");

  SerialGPS.begin(9600); // Iniciar comunicación serie con el módulo GPS
}

void loop() {
  Serial.println("Iniciando loop");
  // Procesar los datos del GPS
  while (SerialGPS.available() > 0) {
    gpsFilter.encode(SerialGPS.read()); // Leer y procesar datos del GPS
  }

  if (gpsFilter.location.isValid()) {
    Serial.println("Datos de GPS válidos");
    // Preparar el cuerpo de la solicitud en formato JSON
    StaticJsonDocument<512> JSON; // Crear un objeto JSON con tamaño 512 bytes
    JSON["latitud"] = gpsFilter.location.lat();
    JSON["longitud"] = gpsFilter.location.lng();
    JSON["altitud"] = gpsFilter.altitude.meters();

    if (gpsFilter.date.isValid()) {
      char fecha[11];
      sprintf(fecha, "%02d/%02d/%04d", gpsFilter.date.day(), gpsFilter.date.month(), gpsFilter.date.year());
      JSON["fecha"] = fecha;
    } else {
      JSON["fecha"] = "No disponible";
    }

    if (gpsFilter.time.isValid()) {
      char hora[13];
      sprintf(hora, "%02d:%02d:%02d.%02d", gpsFilter.time.hour() - 6, gpsFilter.time.minute(), gpsFilter.time.second(), gpsFilter.time.centisecond());
      JSON["hora"] = hora;
    } else {
      JSON["hora"] = "No disponible";
    }

    String jsonString;
    serializeJson(JSON, jsonString); // Convertir el objeto JSON a una cadena

    // Conectar al servidor
    WiFiClient client;
    if (client.connect(serverName, serverPort)) {
      Serial.println("Conectado al servidor");

      // Enviar solicitud HTTP POST
      client.println("POST /api/gps HTTP/1.1");
      client.print("Host: ");
      client.println(serverName);
      client.println("Content-Type: application/json");
      client.print("Content-Length: ");
      client.println(jsonString.length());
      client.println();
      client.println(jsonString);

      // Leer la respuesta del servidor
      while (client.connected()) {
        String line = client.readStringUntil('\n');
        if (line == "\r") {
          break;
        }
      }
      String response = client.readString();
      Serial.println("Respuesta del servidor:");
      Serial.println(response);

      client.stop(); // Cerrar la conexión
    } else {
      Serial.println("Conexión al servidor falló");
    }
  } else {
    Serial.println("Datos de GPS no válidos");
  }

  delay(10000); // Esperar 10 segundos antes de enviar nuevamente
}
